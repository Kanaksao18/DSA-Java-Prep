# A palindrome mirrors around its center.
# So for each character in the string, we expand around 1-letter and 2-letter centers.

# ‚è±Ô∏è Time: O(n¬≤) | üì¶ Space: O(1)

class Solution {
    public String longestPalindrome(String s) {
        if (s == null || s.length() < 1) return "";

        int start = 0, end = 0;

        for (int i = 0; i < s.length(); i++) {
            int len1 = expandFromCenter(s, i, i);     // Odd length
            int len2 = expandFromCenter(s, i, i + 1); // Even length
            int len = Math.max(len1, len2);

            if (len > end - start) {
                start = i - (len - 1) / 2;
                end = i + len / 2;
            }
        }

        return s.substring(start, end + 1);
    }

    private int expandFromCenter(String s, int left, int right) {
        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            left--;
            right++;
        }
        return right - left - 1;  // length of palindrome
    }
}
# üß† What is Manacher‚Äôs Algorithm?
# Manacher's Algorithm cleverly preprocesses the string to handle even and odd-length palindromes uniformly, using a new format like #a#b#c#.

# It builds an array P[i] where each P[i] stores the radius of the palindrome centered at position i.

# ‚úÖ Time: O(n)
# ‚úÖ Space: O(n) (for transformed string and radius array)
class Solution {
    public String longestPalindrome(String s) {
        if (s == null || s.length() == 0) return "";

        // 1. Preprocess: Insert # between characters and at ends
        StringBuilder t = new StringBuilder();
        t.append('^'); // Start anchor
        for (char c : s.toCharArray()) {
            t.append('#');
            t.append(c);
        }
        t.append("#$"); // End anchor

        int n = t.length();
        int[] P = new int[n];  // Radius of palindromes
        int center = 0, right = 0;

        // 2. Manacher's core logic
        for (int i = 1; i < n - 1; i++) {
            int mirror = 2 * center - i;

            if (i < right)
                P[i] = Math.min(right - i, P[mirror]);

            // Try expanding around center i
            while (t.charAt(i + (1 + P[i])) == t.charAt(i - (1 + P[i]))) {
                P[i]++;
            }

            // Update center and right boundary if needed
            if (i + P[i] > right) {
                center = i;
                right = i + P[i];
            }
        }

        // 3. Find the longest palindrome in P[]
        int maxLen = 0;
        int centerIndex = 0;
        for (int i = 1; i < n - 1; i++) {
            if (P[i] > maxLen) {
                maxLen = P[i];
                centerIndex = i;
            }
        }

        // 4. Extract substring from original string
        int start = (centerIndex - maxLen) / 2;
        return s.substring(start, start + maxLen);
    }
}

